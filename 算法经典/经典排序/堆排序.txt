堆：类似与完全二叉树的结构
大顶堆：每个节点的值都大于或者等于它的左右子节点的值。(父节点大于孩子节点)
小顶堆：每个节点的值都小于或者等于它的左右子节点的值。(父节点小于孩子节点)
堆的基本作用是，快速找集合中的最值

例子：大根堆堆排序
 void maxHeapify(vector<int>& a, int i, int heapSize) {
        int left = i * 2 + 1, right = i * 2 + 2, largest = i;//largest代表父节点
        if (left < heapSize && a[left] > a[largest]) {//如果左节点的值大于父节点的值
            largest = left;//将left赋予largest
        } 
        if (right < heapSize && a[right] > a[largest]) {//如果右节点的值大于父节点的值
            largest = right;
        }
        if (largest != i) {//需要进行交换
            swap(a[i], a[largest]);//将父节点和较大的子节点进行交换。
            maxHeapify(a, largest, heapSize);//继续对该节点进行调整
        }
    }
    void buildMaxHeap(vector<int>& a, int heapSize) {
        //从倒数一个非空节点
        for (int i = heapSize/2; i>= 0; --i) {
            maxHeapify(a, i, heapSize);
        } 
    }
    int findKthLargest(vector<int>& nums, int k) {
        //方法二：基于堆排序的思想
        int heapSize = nums.size();
        //构建大根堆
        buildMaxHeap(nums, heapSize);
        for (int i = nums.size() - 1; i >= 0; --i) {
            swap(nums[0], nums[i]);//将堆底的和堆顶进行交换
            --heapSize;
            maxHeapify(nums, 0, heapSize);
        }
        return nums[0];
    }